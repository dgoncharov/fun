The modern technique of tracking dependencies uses include directive.
While this technique is infinitely superior to the manual maintenance there is
still room for improvement.
The main issue is that the include directive is not a part of the dag.


1. Inefficiency.

src:=$(wildcard *.c)
dfiles:=$(src:.c=.d)
%.o: %.c %.d
	gcc -I. -MMD -o $@ -c $<
%.d: ;
include $(dfiles)

When the user runs
$ make hello.o

make includes all dep files in the current directory, even though only hello.d
is needed.



2. This becomes especially problematic when a project has one test driver per
source file. E.g. a lib can have implementation files api.c, util.c, and
engine.c and test programs api.t.c, util.t.c and engine.t.c. Each test program
contains function main and is supposed to be compiled and linked with the
module that it tests.

%.t.tsk: %.o %.t.o
	$(CC) -o $@ $^


When the user runs
$ make api.t.tsk

only api.d and api.t.d are required to be included.

Variations of this style are commonly used. E.g. glibc uses it (except the
tests are called tst-<module>.c).



3. Another scenario is a makefile containing a set of implicit rules and shared
between multiple projects.
include requires that the file name is specified as a parameter to include,
rather than derived from the stem in an implicit rule. This hinders reuse of
the makefile.



4. Another issue with unconditional include is phony targets, such as clean, gzip,
etc.
The usual workaround is to to figure out the specified target and have a set of
ifeq statements to avoid including dep files. This piece of ifeq code
is difficult, especially when there are a lot of phony targets and the user
can specify multiple targets on the command line. E.g.
$ make api.t.tsk install



It is possible to achieve the same automatic tracking of dependencies without
unconditional include.

.SECONDEXPANSION: %.o

%.o: %.c %.d $$(file <%.d)
	gcc $(CPPFLAGS) $(CFLAGS) -MD -MF $*.td -o $@ -c $<
	read obj src headers <$*.td; echo "$$headers" >$*.d
	touch -c $@

%.d: ;
%.h: ;


-MD generates a regular dep file.
Note, gcc's option -MP is not used. The content of dep files is of the form

api.o: api.c api.h <other header files>...\
    <more header files>...

read obj src headers <$*.td; echo "$$headers" >$*.d

is used to extract header files from the generated .td file and store this list of
headers files to a .d file.
The contents of the generated .d file is a space separated list of headers
files, all on one line.

$(file) appends the contents of %.d to the list of prerequisites.

Second expansion ensures $$(file) is expanded only when this rule is used to build
the current target.


There is only one missing piece in this makefile. Make considers generated dep
files and all headers files to be intermediate.  We need a mechanism to tell
make that all files which match %.d and %.h are not to be treated as
intermediate.


So, we introduce special target .NOTINTERMEDIATE and our makefile
becomes

.NOTINTERMEDIATE: %.d %.h
.SECONDEXPANSION: %.o

%.o: %.c %.d $$(file <%.d)
	gcc $(CPPFLAGS) $(CFLAGS) -MD -MF $*.td -o $@ -c $<
	read obj src headers <$*.td; echo "$$headers" >$*.d
	touch -c $@

%.d: ;
%.h: ;



This makefile solves all the above described issues of unconditional include.

An additional bonus is that $(file) is faster than include. When the file
exists include parses the file and evals its contents and when the file is missing include
searches a list of directories. $(file) does none of that.

Another use case for .NOTINTERMEDIATE is the following.
gcc has option -MP to generate an explicit target for each header file.
There are compilers which do not have such an option.
.NOTINTERMEDIATE %.h
can be used to mark header files not intermediate with those compilers.

With the fix from https://savannah.gnu.org/bugs/?60188 it is possible to make
dep files and header files explicit in certain cases with

%.o: %.c $$*.d $$(file <$$*.d)

However, this workaround loses when the object file is not located in the
current directory. Implicit search algo would prepend directory name to the
stem.

Another advantage of .NOTINTERMEDIATE over $$* is ability to be used with
built-in rules, if needed.

Postprocessing in this example uses bash code and handles the gcc format of dep
files. To handle aix and sun format read has to be run in a loop.
