1. Have trie_find return a pointer to an internal null terminated static array of
pointers.  The caller can then iterate the resultant list of rules like this

rule *r = trie_find (trie, "hello.tsk");
for (; *r; ++r) {
}

2. detect_stack_use_after_return=1 causes trie_push to crash.

3. Good and easy to use trie_find interface.
Avoid pointers to pointers.

4. Restore the code which uses offsets rather than pointers.

5. Get rid of qsort.
    Preferably, use trie's facilities to have node_find find the matches in order.

6. Allow the user to store user data along with key and have trie_find return
that data. That user data would be rule* in the case of gmake.

7. Extend each test with testing all found matches.
8. Write more find all tests.

9.
Replace code like
    index = *key == '%' ? escaped_percent : *key;
    next = node->next[index];

with something like
    next = node_next (node, *key);

where node_next

static
const struct node *node_next (const struct node *node, char key)
{
    size_t index;
    index = key == '%' ? escaped_percent : key;
    return node->next[index];
}

10. Compute the complexity of each function.

11. Look at wildcard_spent and avoid checking %, if found a perfect match.

12. Iterative node_free.

13. Double check that all functions are iterative.

14. Move to a dedicated repo.

15. Modify trie_push to save only patterns?
This will allow to get rid of node_find_exact.

16. Either have node->key or node->end. There is no need for both.
If node->key is present, then node_print can be simplified.
If node->key is removed, then trie_find will have to return a list of all
matches in an unspecified order. Each match has to carry user data. The caller
will then have to sort the list by looking at the attached user data.

17. Reuse node_find_fuzzy for node_has. Just return on the first match if a
parameter is passed.

18. Replace trie_has with trie_find which return the found match?
This is more generic. However, this requires that the user supplies some user
data and that user data is stored, so it can be returned.
trie_has allows trie to store no user data.

19.
